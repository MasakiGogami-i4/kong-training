name: Deploy Kong Data Plane to AKS

on:
  workflow_dispatch:

jobs:
  deploy-dp:
    runs-on: ubuntu-latest

    env:
      KONNECT_API: https://us.api.konghq.com/v2

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Pull Kong from DockerHub
        run: |
          docker pull kong/kong-gateway:${{ vars.KONG_VER }}

      - name: Scan Kong image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: kong/kong-gateway:${{ vars.KONG_VER }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Retag and Push to GHCR
        run: |
          docker tag kong/kong-gateway:${{ vars.KONG_VER }} ghcr.io/${{ secrets.GHCR_USERNAME }}/kong-gateway:${{ vars.KONG_VER }}
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/kong-gateway:${{ vars.KONG_VER }}

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS kubeconfig
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Create GHCR pull secret in Kubernetes
        run: |
          kubectl create ns kong || true
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=${{ secrets.GHCR_EMAIL }} \
            -n kong --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate TLS cert and register to Konnect
        id: cert
        run: |
          mkdir certs
          openssl req -new -x509 -nodes -newkey rsa:2048 \
            -subj "/CN=kongdp/C=US" \
            -keyout ./certs/tls.key -out ./certs/tls.crt -days 3650

          export CERT=$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' ./certs/tls.crt)

          CP_ID=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "$KONNECT_API/control-planes" \
            | jq -r --arg name "${{ vars.CP_NAME }}" '.data[] | select(.name==$name) | .id')

          curl -sX POST \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "$KONNECT_API/control-planes/${CP_ID}/dp-client-certificates" \
            --json '{"cert":"'"$CERT"'"}'

          CP_ENDPOINT=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "$KONNECT_API/control-planes/${CP_ID}" \
            | jq -r '.config.control_plane_endpoint' | sed "s@https://@@")

          TP_ENDPOINT=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "$KONNECT_API/control-planes/${CP_ID}" \
            | jq -r '.config.telemetry_endpoint' | sed "s@https://@@")

          echo "cp_endpoint=$CP_ENDPOINT" >> $GITHUB_OUTPUT
          echo "tp_endpoint=$TP_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Create TLS secret for Kong
        run: |
          kubectl create secret tls kong-cluster-cert -n kong \
            --cert=./certs/tls.crt \
            --key=./certs/tls.key \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create values.yaml
        run: |
          cat <<EOF > values.yaml
          image:
            repository: ghcr.io/${{ secrets.GHCR_USERNAME }}/kong-gateway
            tag: ${{ vars.KONG_VER }}
            pullSecrets:
              - ghcr-secret

          secretVolumes:
            - kong-cluster-cert

          admin:
            enabled: false

          env:
            role: data_plane
            database: "off"
            konnect_mode: "on"
            cluster_mtls: pki
            cluster_control_plane: ${{ steps.cert.outputs.cp_endpoint }}:443
            cluster_server_name: ${{ steps.cert.outputs.cp_endpoint }}
            cluster_telemetry_endpoint: ${{ steps.cert.outputs.tp_endpoint }}:443
            cluster_telemetry_server_name: ${{ steps.cert.outputs.tp_endpoint }}
            cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
            cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
            lua_ssl_trusted_certificate: system
            vitals: "off"
            router_flavor: expressions

          ingressController:
            enabled: false

          resources:
            requests:
              cpu: 1
              memory: "2Gi"
          EOF

      - name: Deploy Kong DP via Helm
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo update
          helm upgrade -i my-kong kong/kong -n kong --values ./values.yaml --wait --atomic --debug
